#!/usr/bin/env bpftrace

BEGIN
{
  printf("Tracing MySQLd file I/O. Press Ctrl-C to end.\n");
  printf("%-12s %-6s %-16s %-8s %-12s %-s\n", "TIME", "PID", "COMM", "OP", "OFFSET", "FILE:SIZE(bytes)");
}

// Map to store file descriptors to filenames
// KEY: (Thread ID, File Descriptor), VALUE: (const char*) Filename
@fds[u32, int]: const char*;

// Temporary map to store filename during the open call
@open_file[tid]: const char *;

// Store filename on open/openat entry
tracepoint:syscalls:sys_enter_open,
tracepoint:syscalls:sys_enter_openat
/comm == "mysqld"/
{
  @open_file[tid] = args->filename;
}

// Associate FD with filename on open/openat return
tracepoint:syscalls:sys_exit_open,
tracepoint:syscalls:sys_exit_openat
/comm == "mysqld" && args->ret > 0 && @open_file[tid] != 0/
{
  @fds[tid, args->ret] = @open_file[tid];
  delete(@open_file[tid]);
}

// Trace positioned reads
tracepoint:syscalls:sys_enter_pread64
/comm == "mysqld" && @fds[tid, args->fd] != 0/
{
  time("%H:%M:%S ");
  printf("%-6d %-16s %-8s %-12d %s:%d\n",
    pid, comm, "READ", args->offset, str(@fds[tid, args->fd]), args->count);
}

// Trace positioned writes
tracepoint:syscalls:sys_enter_pwrite64
/comm == "mysqld" && @fds[tid, args->fd] != 0/
{
  time("%H:%M:%S ");
  printf("%-6d %-16s %-8s %-12d %s:%d\n",
    pid, comm, "WRITE", args->offset, str(@fds[tid, args->fd]), args->count);
}

// Clean up map on close
tracepoint:syscalls:sys_enter_close
/comm == "mysqld" && @fds[tid, args->fd] != 0/
{
  delete(@fds[tid, args->fd]);
}

// Clean up temp map if open call failed
tracepoint:syscalls:sys_exit_open,
tracepoint:syscalls:sys_exit_openat
/comm == "mysqld" && @open_file[tid] != 0 && args->ret <= 0/
{
  delete(@open_file[tid]);
}